from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from decimal import Decimal
import json


class AutoTradingStrategy(models.Model):
    """Automated trading strategy configuration"""
    
    STRATEGY_TYPES = [
        ('ML_SIGNALS', 'ML-Based Signals'),
        ('TECHNICAL', 'Technical Analysis'),
        ('MOMENTUM', 'Momentum Trading'),
        ('MEAN_REVERSION', 'Mean Reversion'),
        ('ARBITRAGE', 'Arbitrage'),
        ('CUSTOM', 'Custom Strategy'),
    ]
    
    STATUS_CHOICES = [
        ('ACTIVE', 'Active'),
        ('PAUSED', 'Paused'),
        ('STOPPED', 'Stopped'),
        ('ERROR', 'Error'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='auto_strategies')
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    strategy_type = models.CharField(max_length=20, choices=STRATEGY_TYPES)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PAUSED')
    
    # Strategy Configuration
    symbols = models.JSONField(default=list, help_text="List of symbols to trade")
    portfolio = models.ForeignKey('portfolio.Portfolio', on_delete=models.CASCADE, null=True, blank=True)
    max_position_size = models.DecimalField(max_digits=10, decimal_places=2, default=1000)
    max_daily_trades = models.IntegerField(default=10)
    risk_per_trade = models.DecimalField(max_digits=5, decimal_places=2, default=1.0)  # Percentage
    
    # Strategy Parameters
    strategy_parameters = models.JSONField(default=dict, help_text="Strategy-specific parameters")
    
    # N8N Workflow Integration
    n8n_workflow_id = models.CharField(max_length=100, blank=True, null=True)
    n8n_webhook_url = models.URLField(blank=True, null=True)
    webhook_secret = models.CharField(max_length=100, blank=True, null=True)
    
    # Performance Tracking
    total_trades = models.IntegerField(default=0)
    winning_trades = models.IntegerField(default=0)
    total_profit_loss = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    win_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    last_executed = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        verbose_name = "Auto Trading Strategy"
        verbose_name_plural = "Auto Trading Strategies"
        indexes = [
            models.Index(fields=['user', 'status']),
            models.Index(fields=['strategy_type', 'status']),
        ]
    
    def __str__(self):
        return f"{self.name} - {self.strategy_type}"
    
    def calculate_win_rate(self):
        """Calculate and update win rate"""
        if self.total_trades > 0:
            self.win_rate = (self.winning_trades / self.total_trades) * 100
        else:
            self.win_rate = 0
        self.save(update_fields=['win_rate'])


class AutoTradingSignal(models.Model):
    """Automated trading signals generated by strategies"""
    
    SIGNAL_TYPES = [
        ('BUY', 'Buy'),
        ('SELL', 'Sell'),
        ('HOLD', 'Hold'),
        ('CLOSE', 'Close Position'),
    ]
    
    CONFIDENCE_LEVELS = [
        ('LOW', 'Low'),
        ('MEDIUM', 'Medium'),
        ('HIGH', 'High'),
        ('VERY_HIGH', 'Very High'),
    ]
    
    STATUS_CHOICES = [
        ('GENERATED', 'Generated'),
        ('SENT', 'Sent to N8N'),
        ('EXECUTED', 'Executed'),
        ('FAILED', 'Failed'),
        ('CANCELLED', 'Cancelled'),
    ]
    
    strategy = models.ForeignKey(AutoTradingStrategy, on_delete=models.CASCADE, related_name='signals')
    stock = models.ForeignKey('markets.Stock', on_delete=models.CASCADE)
    
    signal_type = models.CharField(max_length=10, choices=SIGNAL_TYPES)
    confidence = models.CharField(max_length=20, choices=CONFIDENCE_LEVELS)
    confidence_score = models.DecimalField(max_digits=5, decimal_places=2)
    
    # Signal Details
    target_price = models.DecimalField(max_digits=15, decimal_places=4)
    stop_loss = models.DecimalField(max_digits=15, decimal_places=4, null=True, blank=True)
    take_profit = models.DecimalField(max_digits=15, decimal_places=4, null=True, blank=True)
    quantity = models.DecimalField(max_digits=15, decimal_places=4)
    
    # Technical Indicators
    technical_data = models.JSONField(default=dict)
    
    # N8N Integration
    n8n_execution_id = models.CharField(max_length=100, blank=True, null=True)
    webhook_sent_at = models.DateTimeField(null=True, blank=True)
    execution_response = models.JSONField(default=dict)
    
    # Status and Timestamps
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='GENERATED')
    error_message = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    executed_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        verbose_name = "Auto Trading Signal"
        verbose_name_plural = "Auto Trading Signals"
        indexes = [
            models.Index(fields=['strategy', '-created_at']),
            models.Index(fields=['stock', 'signal_type']),
            models.Index(fields=['status', '-created_at']),
        ]
    
    def __str__(self):
        return f"{self.signal_type} {self.stock.symbol} - {self.confidence}"


class WorkflowExecution(models.Model):
    """N8N workflow execution tracking"""
    
    EXECUTION_STATUS = [
        ('RUNNING', 'Running'),
        ('SUCCESS', 'Success'),
        ('ERROR', 'Error'),
        ('WAITING', 'Waiting'),
        ('CANCELLED', 'Cancelled'),
    ]
    
    strategy = models.ForeignKey(AutoTradingStrategy, on_delete=models.CASCADE, related_name='executions')
    signal = models.ForeignKey(AutoTradingSignal, on_delete=models.CASCADE, null=True, blank=True)
    
    # N8N Details
    n8n_execution_id = models.CharField(max_length=100, unique=True)
    workflow_name = models.CharField(max_length=200)
    
    # Execution Data
    input_data = models.JSONField(default=dict)
    output_data = models.JSONField(default=dict)
    execution_status = models.CharField(max_length=20, choices=EXECUTION_STATUS)
    
    # Performance
    duration_seconds = models.IntegerField(null=True, blank=True)
    nodes_executed = models.IntegerField(default=0)
    
    # Timestamps
    started_at = models.DateTimeField()
    finished_at = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "Workflow Execution"
        verbose_name_plural = "Workflow Executions"
        indexes = [
            models.Index(fields=['strategy', '-started_at']),
            models.Index(fields=['execution_status']),
        ]
    
    def __str__(self):
        return f"{self.workflow_name} - {self.execution_status}"


class TradingWebhook(models.Model):
    """Webhook endpoints for automated trading"""
    
    WEBHOOK_TYPES = [
        ('SIGNAL', 'Trading Signal'),
        ('EXECUTION', 'Trade Execution'),
        ('STATUS', 'Status Update'),
        ('ALERT', 'Alert Notification'),
    ]
    
    name = models.CharField(max_length=200)
    webhook_type = models.CharField(max_length=20, choices=WEBHOOK_TYPES)
    endpoint_url = models.URLField()
    secret_key = models.CharField(max_length=100)
    
    # Configuration
    is_active = models.BooleanField(default=True)
    retry_count = models.IntegerField(default=3)
    timeout_seconds = models.IntegerField(default=30)
    
    # Headers and Authentication
    custom_headers = models.JSONField(default=dict)
    auth_type = models.CharField(max_length=20, choices=[
        ('NONE', 'None'),
        ('BEARER', 'Bearer Token'),
        ('BASIC', 'Basic Auth'),
        ('API_KEY', 'API Key'),
    ], default='NONE')
    auth_credentials = models.JSONField(default=dict)
    
    # Usage Statistics
    total_calls = models.IntegerField(default=0)
    successful_calls = models.IntegerField(default=0)
    last_called = models.DateTimeField(null=True, blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Trading Webhook"
        verbose_name_plural = "Trading Webhooks"
    
    def __str__(self):
        return f"{self.name} - {self.webhook_type}"
    
    @property
    def success_rate(self):
        if self.total_calls > 0:
            return (self.successful_calls / self.total_calls) * 100
        return 0


class AutoTradingLog(models.Model):
    """Comprehensive logging for automated trading activities"""
    
    LOG_LEVELS = [
        ('DEBUG', 'Debug'),
        ('INFO', 'Info'),
        ('WARNING', 'Warning'),
        ('ERROR', 'Error'),
        ('CRITICAL', 'Critical'),
    ]
    
    LOG_CATEGORIES = [
        ('SIGNAL_GENERATION', 'Signal Generation'),
        ('STRATEGY_EXECUTION', 'Strategy Execution'),
        ('WEBHOOK_CALL', 'Webhook Call'),
        ('TRADE_EXECUTION', 'Trade Execution'),
        ('ERROR_HANDLING', 'Error Handling'),
        ('PERFORMANCE', 'Performance'),
    ]
    
    strategy = models.ForeignKey(AutoTradingStrategy, on_delete=models.CASCADE, related_name='logs')
    signal = models.ForeignKey(AutoTradingSignal, on_delete=models.CASCADE, null=True, blank=True)
    execution = models.ForeignKey(WorkflowExecution, on_delete=models.CASCADE, null=True, blank=True)
    
    level = models.CharField(max_length=20, choices=LOG_LEVELS)
    category = models.CharField(max_length=30, choices=LOG_CATEGORIES)
    message = models.TextField()
    
    # Additional Context
    context_data = models.JSONField(default=dict)
    stack_trace = models.TextField(blank=True)
    
    # Performance Metrics
    execution_time_ms = models.IntegerField(null=True, blank=True)
    memory_usage_mb = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    
    timestamp = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "Auto Trading Log"
        verbose_name_plural = "Auto Trading Logs"
        indexes = [
            models.Index(fields=['strategy', '-timestamp']),
            models.Index(fields=['level', '-timestamp']),
            models.Index(fields=['category', '-timestamp']),
        ]
    
    def __str__(self):
        return f"{self.level} - {self.category} - {self.timestamp}"


class TradingBotConfiguration(models.Model):
    """Configuration settings for trading bots"""
    
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='bot_config')
    
    # General Settings
    is_enabled = models.BooleanField(default=False)
    paper_trading = models.BooleanField(default=True)  # Start with paper trading
    
    # Risk Management
    max_daily_loss = models.DecimalField(max_digits=15, decimal_places=2, default=1000)
    max_portfolio_exposure = models.DecimalField(max_digits=5, decimal_places=2, default=80)  # Percentage
    max_position_size = models.DecimalField(max_digits=5, decimal_places=2, default=5)  # Percentage of portfolio
    
    # Trading Hours
    trading_start_time = models.TimeField(default='09:00:00')
    trading_end_time = models.TimeField(default='16:00:00')
    trading_timezone = models.CharField(max_length=50, default='Asia/Riyadh')
    
    # Notification Settings
    email_notifications = models.BooleanField(default=True)
    sms_notifications = models.BooleanField(default=False)
    webhook_notifications = models.BooleanField(default=True)
    
    # N8N Integration
    n8n_server_url = models.URLField(blank=True, null=True)
    n8n_api_key = models.CharField(max_length=100, blank=True, null=True)
    n8n_webhook_base_url = models.URLField(blank=True, null=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Trading Bot Configuration"
        verbose_name_plural = "Trading Bot Configurations"
    
    def __str__(self):
        return f"Bot Config - {self.user.username}"